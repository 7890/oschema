<?xml version="1.0"?>
<xs:schema 
xmlns:xs="http://www.w3.org/2001/XMLSchema" 
attributeFormDefault="unqualified" 
elementFormDefault="qualified">

  <xs:annotation>
    <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
=============================================
Revision history

-20140819       v1.3.2    tom@trellis.ch
for float and double value types extend xs:float and xs:double 
instead of xs:decimal to allow scientific notation

affects osc_type_param_f*, osc_type_param_d*, osc_point_f, osc_point_d

This change is inspired by a pull request "Change xs:decimal To xs:double"
by fundamental / M. McCurry, 62a38c53c9ec942c88e6dd561146378df85d5567

xsd numeric datatypes overview: http://docstore.mik.ua/orelly/xml/schema/ch04_04.htm

rename type name osc_type_param_decimal to osc_type_param_fd

-20140729       v1.3.1    tom@trellis.ch
add version to meta:
	express versions of unit to describe, api of unit
	<version type="api">21.4a</version>
add default_settings to meta:
	add conf to default_settings:
	<conf type="listen_port">1234</conf>
		express OSC settings, indicate cmd line option

type_osc_named_url: add (optional) @title to (optional) url 
elements in meta

add param_t (t) timetag

-20140727       v1.3    tom@trellis.ch
add message_[in|out]@abstract (0,1), optional

message path pattern containing * or [n(,(m))] ranges must be marked as
abstract

Add [x,y] ranges to message_[in|out]@pattern
0 <= x <= y

To express hierarchical structures with repeating components and 
sub-trees, "enumerated paths". Methods with [] ranges are abstract and 
can't be sent in the shown form to the unit. The sender must construct/expand 
the rule and the unit has its own way to delegate and map to an internal 
control/query endpoint. 

/a[0,5]/b[0,7]/x ii
/a[5]/b[3]/special ff

#unbounded/unknown/runtime/dynamic decision, starting at 1
/x/y[1,]/z ss

ranges can appear "alone" or as last in path. valid:
/[3,4]/a[2]

@regex in param_s REMOVED
-> will be in own element

(need more + better annotation/documentations)

-20140721       v1.2.2  tom@trellis.ch
add param_T: true
add param_F: false
add param_N: nil
add param_I: infinity
(no @default, no @units)
no value checks needed for these primitives

change type_osc_format_version to xs:string

-20140721       v1.2.1  tom@trellis.ch
add param_c: ascii char, decimal int value 0-127
supporting range_min_max (hints|grid)

-20140718       v1.2    tom@trellis.ch
Remove message_[in|out]: uri, doc_origin
(v1.1 instances will be INVALID but there are none)

Add element aspect to message_[in|out]

aspect: uri(optional), doc_origin, xpath
Points to another oschema instance document accessible 
at doc_origin. xpath denotes which parts (messages) will 
be "cherry picked". The pattern attribute of the message 
having an aspect element denotes the "mount point" of 
the referenced aspect.

Allow mixed order of message_[in|out]
github issue#2, Thanks to Mark McCurry for the hint

-20140714       v1.1    tom@trellis.ch
Make message_[in|out]@pattern more like a pattern 
allowing * (type_osc_pattern)

Allow * in typetags (type_osc_typetag)

Both uses of '*' create ambiguity that is left to 
describe in the 'desc' and 'custom' elements

New attributes for message_[in|out]: uri, doc_origin
uri: pointing to an existing oschema defined "namespace"
doc_origin: pointing to the oschema instance document 
containing the definition

This allows to use already defined OSC message designs 
(path + typetag) as a subtree of a given path of the 
unit being described. The idea was to support  
re-usable aspects that OSC units share. It means 
these units agreed on semantics of path+typetag for 
a specific purpose (i.e. "transport control").

All v1.0 instance documents are still within the valid 
domain with these additions. However v1.1 instances will 
be invalid when tested against v1.0 schema. To prevent 
this, use the current v1.1 schema (that adds v1.1 as 
valid format version).

-20140707	v1.0	tom@trellis.ch
Initial release. Not every type is fully documented yet.


=============================================

oschema (OSC Schema, 'oskima') is a proposal for a set of 
tools to to describe OSC units in a standardized way.

A unit in this context is commonly software, a program. 
Hardware devices are also included as subject to describe.

Why describe? Every program already has that (separately)?

If we can create a reasonable standard for the markup of 
OSC capabilities and communication interaction models 
that is able to describe all aspects of interest in a common 
machine readable language, every particle in the ecosystem 
will benefit.

There was a time... when you had that synth or sound 
module with MIDI and on the later pages of the user or 
owner manual, there was (or still is) the MIDI implementation 
chart (or similar). And MIDI has already considered back then 
ways to extend the standard and send custom data. 
However the MIDI domain is easier to overview than OSC 
due to the 0-127 nature and some given controller numbers 
and instrument mappings.

The current initiative does not try to limit OSC 
to a set of commands, but rather keeping the freedom 
OSC offers to define interaction models and "just" 
describe that in a standardized way.

The real work is to create instances of documentations 
for all these great programs that in some sort provide 
OSC control, being OSC controllers or other useful tools 
in the domain.

Since there are similarities in the definition of APIs 
(function/method name, parameters, datatypes basically) it 
will be possible to take advantage of existing structured 
documents or derivates thereof. One example to note are LV2 
turtle .ttl files.

Examples of useful outputs in a scenario from definition to prototype 
to C code:

              (to be)
 My Device (OSC wrapped) | described as oschema doc (XML) --- validated
 ________________________|           |
                                     |
             Transform  --->         \. generated HTML doc
             using reliable          \. text (manpage, plain / asciidoc-like)
             data from one           \. code skeletons
             source file to create   \. -for the unit
             desired output format   \. -for the counterpart (inverted directions)
                                     \. JavaScript prototyping (*1)
                                     \. C skeletons using liblo (the real thing)

*1) With your favourite OSC js "node". See also https://github.com/7890/oscc

The oschema XSD schema should not restrict the expression 
of the API. It helps to keep a common structure for the benefit 
of a chain of post processing. XSL transformations and other 
techniques to work on XML files are ready to get the desired 
result; that is, for all valid oschema instances!

oschema is flexible enough to leave things out or be more 
precise in other areas yet it is relatively strict in the 
validation of element nesting, values and "inter-value" semantics.
This is necessary for processes that work on the instance 
documents. A validated instance can be processed more relaxed, 
rely on certain structural rules and semantics. This means many 
of the assert and verify code that would be needed for a 
moderately stable process is now outsourced to a validation 
process using the schema.

Please note, oschema per se doesn't have any GUI specific 
information attached. It aims to cover all the API 
aspects that make up the OSC functionality of the program.

For the GUI-side of things, where buttons, rotary knobs, 
sliders, selection boxes etc. are of interest, it is obvious 
that a seperate GUI centric definition must be used that 
should not mix with the model (if we believe in the model/view 
principle (does it really *work*?))

An oschema instance document plus a "recipe" will make up 
all the necessary artefacts for the things needed in-between 
the GUI and the model or even directly by the GUI.

Example:
                          program, API, model
 GUI -------------------- described as oschema doc (XML) --- validated
              |                                   /
              |                                  /  generate intermediary with
   intermediary knowing GUI centric, model centric              "receipe"
 (can keep state for dumb GUIs, add abstract GUI functions)     (GUI centric)


Please note, oschema is just the schema and some related 
documentation and does not include any of those output 
formatters. The only existing output format (as of today in 
July 2014) is oscdoc (see https://github.com/7890/oscdoc). 
oscdoc just takes any valid oschema instance and 
creates a HTML page that includes a simple search facility 
on OSC message patterns and displays the contents in a 
per-message view, showing all parameters, ranges, descriptions, 
restrictions and custom data.

Workflow, Chains

1) Write the osctool.xml for unit. See examples and oschema 
   documentation to get started. Please ask if anything 
   is missing or unclear.

2) Validate

               .--- extended tests on xml, using xslt / other
.___         _/ 
| osctool.xml  \
.--            |--- validate xml against xsd
              /              
 oschema.xsd .               -> valid or invalid
                             -> hints on error are given
.______________________
|me@wheel:~/oschema$ oschema_validate osctool.xml
|#choose a better name for the xml file
.---------------------

(No artefacts)


3) Use *any* of the available post-processing chains for 
   oschema docs. Hum, there is currently just *oscdoc* that 
   does that.


               .--- add additional resources for HTML
.___         _/ 
| osctool.xml  \
.--            |--- xsl transform
              /
   index.xsl .
   oschema2html.xsl          -> Easy integration to existing project
                             -> Small distributable
.______________________
|me@wheel:~/oscdoc$ oscdoc unit.xml /tmp
|...
.---------------------

Artefacts: index.html, resources folder containing referenced 
css, js etc.

</pre>]]></xs:documentation>
  </xs:annotation>

  <!-- root element -->
  <xs:element name="osc_unit" type="type_osc_unit"/>
  <xs:complexType name="type_osc_unit" mixed="true">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>Root element containing a formal description of the OSC API
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="meta" type="type_osc_meta" maxOccurs="1" minOccurs="1"/>
      <xs:element name="doc" type="type_osc_any" maxOccurs="1" minOccurs="0"/>
      <xs:choice>
        <xs:sequence maxOccurs="unbounded" minOccurs="0">
          <xs:element name="message_in" type="type_osc_message_in" maxOccurs="unbounded" minOccurs="0"/>
          <xs:element name="message_out" type="type_osc_message_out" maxOccurs="unbounded" minOccurs="0"/>
        </xs:sequence>
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="format_version" type="type_osc_format_version" use="required"/>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_message_in" mixed="true">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>INCOMING message
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:sequence maxOccurs="unbounded" minOccurs="0">
      <xs:element name="aspect" type="type_osc_message_aspect" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="desc" type="xs:string" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="custom" type="type_osc_any" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="param_i" type="type_osc_param_i" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="param_h" type="type_osc_param_h" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="param_f" type="type_osc_param_f" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="param_d" type="type_osc_param_d" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="param_s" type="type_osc_param_s" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="param_b" type="type_osc_param_b" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="param_c" type="type_osc_param_c" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="param_T" type="type_osc_param_T" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="param_F" type="type_osc_param_F" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="param_N" type="type_osc_param_N" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="param_I" type="type_osc_param_I" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="param_t" type="type_osc_param_t" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="param_X" type="type_osc_param" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="param__" type="type_osc_param_" maxOccurs="unbounded" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="pattern" type="type_osc_pattern" use="required"/>
    <xs:attribute name="typetag" type="type_osc_typetag" use="required"/>
    <xs:attribute name="abstract" type="type_osc_boolean" use="optional"/>
  </xs:complexType>

<!-- ============================================= -->
  <xs:complexType name="type_osc_message_out" mixed="true">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>OUTGOING message
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:sequence maxOccurs="unbounded" minOccurs="0">
      <xs:element name="aspect" type="type_osc_message_aspect" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="desc" type="xs:string" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="custom" type="type_osc_any" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="condition" type="type_osc_condition" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="target" type="type_osc_target" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="param_i" type="type_osc_param_i" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="param_h" type="type_osc_param_h" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="param_f" type="type_osc_param_f" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="param_d" type="type_osc_param_d" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="param_s" type="type_osc_param_s" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="param_b" type="type_osc_param_b" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="param_c" type="type_osc_param_c" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="param_T" type="type_osc_param_T" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="param_F" type="type_osc_param_F" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="param_N" type="type_osc_param_N" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="param_I" type="type_osc_param_I" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="param_t" type="type_osc_param_t" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="param_X" type="type_osc_param" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="param__" type="type_osc_param_" maxOccurs="unbounded" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="pattern" type="type_osc_pattern" use="required"/>
    <xs:attribute name="typetag" type="type_osc_typetag" use="required"/>
    <xs:attribute name="abstract" type="type_osc_boolean" use="optional"/>
  </xs:complexType>

<!-- ============================================= -->
  <xs:complexType name="type_osc_message_aspect">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>REUSABLE message(s)
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="uri" type="type_osc_unit_path" maxOccurs="1" minOccurs="0"/>
      <xs:element name="doc_origin" type="type_osc_url" maxOccurs="1" minOccurs="1"/>
      <xs:element name="xpath" type="xs:string" maxOccurs="1" minOccurs="1"/>
    </xs:sequence>
  </xs:complexType>

<!-- ============================================= -->
  <xs:simpleType name="type_osc_typetag">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>http://liblo.sourceforge.net/docs/group__liblo.html

LO_INT32 	32 bit signed integer.
LO_FLOAT 	32 bit IEEE-754 float.
LO_STRING 	Standard C, NULL terminated string.
LO_BLOB 	OSC binary blob type. Accessed using the lo_blob_*() functions.
LO_INT64 	64 bit signed integer.
LO_TIMETAG 	OSC TimeTag type, represented by the lo_timetag structure.
                sec: The number of seconds since Jan 1st 1900 in the UTC timezone. 
                frac: The fractions of a second offset from above, expressed as 1/2^32nds of a second
LO_DOUBLE 	64 bit IEEE-754 double.
 LO_SYMBOL 	Standard C, NULL terminated, string. Used in systems which distinguish strings and symbols.
LO_CHAR 	Standard C, 8 bit, char variable.
 LO_MIDI 	A 4 byte MIDI packet.
LO_TRUE 	Symbol representing the value True.
LO_FALSE 	Symbol representing the value False.
LO_NIL 	Symbol representing the value Nil.
LO_INFINITUM 	Symbol representing the value Infinitum. 

Only a subset of these types is currently supported.

&apos;_&apos; can be used to express an unknown count of parameters.
&apos;_&apos; can appear as last char only and refers to the last given type
for example:
&apos;f_&apos; means 0 - n float params

&apos;X&apos; expresses unknown / custom shaped param

&apos;*&apos; a shortcut for X_, not even requiring a parameter_X and parameter__ element
example use:
pattern: /prefix/*
typetag: *
uri: ...
doc_origin: ...
this means all below /prefix is defined by namespace uri, accessible at doc_origin

</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="([ihfdsbcTFNItX]*)|([ihfdsbcTFNItX]{1,}[_]?)|([*])"/>
    </xs:restriction>
  </xs:simpleType>
<!-- ============================================= -->
  <xs:simpleType name="type_osc_type">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>Match a single type character. See type_osc_types for description.
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="[ihfdsbcTFNItX]{1}"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="type_osc_pattern">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>-OSC patterns should start with either "/" or "#". The latter is used sometimes to express bundles
-All lower- and uppercase characters a-z, A-Z and digits 0-9 are allowed
-"_", "-" and "." are also allowed
-the "/" is used as a path delimiter
-OSC patterns should not end with "/"

Valid pattern examples:
/
/standard/case
/a_b/c-d/123.4
#foo
/CASE/sensitive
/+/-/_/8./3 


http://opensoundcontrol.org/spec-1_0
Each OSC Method and each OSC Container other than the root of the tree has a symbolic name, 
an ASCII string consiting of printable characters other than the following:

character 	name 	ASCII code (decimal)
' ' 	space 	32
# 	number sign 	35
* 	asterisk 	42
, 	comma 	44
/ 	forward slash 	47
? 	question mark 	63
[ 	open bracket 	91
] 	close bracket 	93
{ 	open curly brace 	123
} 	close curly brace 	125

---

This means any of these characters appearing in a path make the path not an allowed OSC path by 
the specification.

These characters could be used to express abstract paths in a documentation context.

The idea is to allow defining repetitive path patterns to handle large trees with less method 
signatures at the cost of clients needing to interprete the pattern (as well as the described 
unit of course).

MESSAGE PATH PATTERNS THAT CONTAIN NON - ALLOWED CHARACTERS SHOULD/WILL BE MARKED AS
"ABSTRACT"

message_[in|out]@abstract

---
pattern: /prefix/*
typetag: *
uri: ...
doc_origin: ...
this means all below /prefix is defined by namespace uri, accessible at doc_origin

*: anything

(((
#: any number

?: any single char

, ?
)))

---
http://en.wikipedia.org/wiki/Interval_%28mathematics%29
Notations for intervals

The interval of numbers between a and b, including a and b, is often denoted [a, b]. The 
two numbers are called the endpoints of the interval.
---

negative values in the interval set are not allowed

interval test: 
[x,y]: interval x... y, x<=y, x and y included, non-negative integers

[x]: == [x,x]: x 

[x,]: interval starting at x, x included, non-negative integers

valid examples
[0,9],[3,6],[3,3],[3],[3,]

invalid examples
[-1,4],[3,2],[,3],[,]

((((

[33,$(rule,end)]: set starting at a, all values following $increment rule up to end
[3,$((+=2,*=4),155)]

set test:

{1,2}: 1 and 2 are in the set
{2,1}: 2 and 1 are in the set (order (can) matter)
{2,2,1}: 2 two times in set

))))


</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="/|#|([\*\+a-zA-Z0-9\./_-]|([\[][0-9]+([,]([0-9]+)?)?[\]]))+"/>
<!--
/|#
|
(
	[\*a-zA-Z0-9\./_-]
	|
	(
		[\[]
		[0-9]+
		(
			[,]
			(
				[0-9]+
			)?
		)?
		[\]]
	)
)+

[^/.]
-->

    </xs:restriction>
  </xs:simpleType>
<!-- ============================================= -->
  <xs:simpleType name="type_osc_symbol">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>inspired by lv2:Symbol
http://lv2plug.in/ns/lv2core/#Symbol

A short restricted name used as a machine and human readable identifier. The first character must be one of _, a-z or A-Z and subsequent characters can be from _, a-z, A-Z and 0-9. This is a valid C identifier

-> Every parameter of any OSC message pattern should have symbol or "variable name" for better clarity of the meaning of the parameter
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="[_a-zA-Z][_a-zA-Z0-9]*"/>
    </xs:restriction>
  </xs:simpleType>
<!-- ============================================= -->
  <xs:simpleType name="type_osc_range_limits">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>For decimal/float/double value ranges (lmin, lmax):

"[]"	min inclusive, max inclusive  min <= x <= max
"[["	min inclusive, max exclusive  min <= x <  max
"]]"	min exclusive, max inclusive  min <  x <= max
"]["	min exclusive, max exclusive  min <  x <  max

int values:

Implicitely "[]" min/max inclusive min <= x <= max
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="["/>
      <xs:enumeration value="]"/>
    </xs:restriction>
  </xs:simpleType>



<!-- ============================================= -->
  <xs:simpleType name="type_osc_version_type">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>version types
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="unit"/>
      <xs:enumeration value="api"/>
    </xs:restriction>
  </xs:simpleType>

<!-- ============================================= -->
  <xs:simpleType name="type_osc_conf_type">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>port types
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="listen_port"/>
      <xs:enumeration value="send_from_port"/>
      <xs:enumeration value="send_to_port"/>
      <xs:enumeration value="send_to_host"/>
    </xs:restriction>
  </xs:simpleType>

<!-- ============================================= -->
  <xs:complexType name="type_osc_conf">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="type" type="type_osc_conf_type" use="required"/>
        <xs:attribute name="cmd_option" type="xs:string" use="optional"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

<!-- ============================================= -->
  <xs:complexType name="type_osc_version">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
    <xs:extension base="xs:string">
        <xs:attribute name="type" type="type_osc_version_type" use="required"/>
    </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_default_settings">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:sequence maxOccurs="unbounded" minOccurs="0">
      <xs:element name="conf" type="type_osc_conf" maxOccurs="unbounded" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

<!-- ============================================= -->
  <xs:simpleType name="type_osc_boolean">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>0(false) or 1(true)
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:unsignedByte">
      <xs:enumeration value="0"/>
      <xs:enumeration value="1"/>
    </xs:restriction>
  </xs:simpleType>
<!-- ============================================= -->
  <xs:simpleType name="type_osc_url">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>URL, loose check
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:anyURI">
      <xs:pattern value="[a-z]{1,}://.*"/>
    </xs:restriction>
  </xs:simpleType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_named_url">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>URL with title. Use in /meta/url -> indicate source, project home, etc.
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="type_osc_url">
        <xs:attribute name="title" type="xs:string" use="optional"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:simpleType name="type_osc_unit_path">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>URI in the form of an URL that denotes unique identifier for the osc unit being described.
Must end with /
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:restriction base="type_osc_url">
      <xs:pattern value=".*/"/>
    </xs:restriction>
  </xs:simpleType>
<!-- ============================================= -->
  <xs:simpleType name="type_osc_format_version">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>Current and previous version strings
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="1.0"/>
      <xs:enumeration value="1.1"/>
      <xs:enumeration value="1.2"/>
      <xs:enumeration value="1.2.1"/>
      <xs:enumeration value="1.2.2"/>
      <xs:enumeration value="1.3"/>
      <xs:enumeration value="1.3.1"/>
      <xs:enumeration value="1.3.2"/>
    </xs:restriction>
  </xs:simpleType>
<!-- ============================================= -->
  <xs:simpleType name="type_osc_condition_type">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>Condition on which a message is sent to target
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="on_request"/>
      <xs:enumeration value="on_change"/>
      <xs:enumeration value="on_interval"/>
    </xs:restriction>
  </xs:simpleType>
<!-- ============================================= -->
  <xs:simpleType name="type_osc_target_type">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>Send target address description
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="requester"/>
      <xs:enumeration value="subscribers"/>
      <xs:enumeration value="hardcoded"/>
      <xs:enumeration value="configured"/>
      <xs:enumeration value="unaddressed_serialize"/>
    </xs:restriction>
  </xs:simpleType>
<!-- ============================================= -->
  <xs:simpleType name="type_osc_protocol">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>UDP,TCP
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="UDP"/>
      <xs:enumeration value="TCP"/>
    </xs:restriction>
  </xs:simpleType>
<!-- ============================================= -->
  <xs:simpleType name="type_osc_type_c">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>c char
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:int">
      <xs:minInclusive value="0"/>
      <xs:maxInclusive value="255"/>
    </xs:restriction>
  </xs:simpleType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_author">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>-Multiple author elements are possible
-All elements of author are optional and can be put in any order (1x each)
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="firstname" type="xs:string" maxOccurs="1" minOccurs="0"/>
      <xs:element name="lastname" type="xs:string" maxOccurs="1" minOccurs="0"/>
      <xs:element name="email" type="xs:string" maxOccurs="1" minOccurs="0"/>
    </xs:all>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_meta">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>Meta data section of an oschema document giving basic information on program and author(s)
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="uri" type="type_osc_unit_path"/>
      <xs:element name="doc_origin" type="type_osc_url"/>
      <xs:element name="author" type="type_osc_author" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="url" type="type_osc_named_url" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="version" type="type_osc_version" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="default_settings" type="type_osc_default_settings" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="desc" type="xs:string" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="custom" type="type_osc_any" maxOccurs="unbounded" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_param">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>Supertype for many param_* elements
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="desc" type="xs:string" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="custom" type="type_osc_any" maxOccurs="unbounded" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="symbol" type="type_osc_symbol" use="required"/>
    <xs:attribute name="units" type="xs:string" use="optional"/>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_param_">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>virtual param denoting repetition of last param 0-n times
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="desc" type="xs:string" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="custom" type="type_osc_any" maxOccurs="unbounded" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_param_integer">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>Supertype for int and long param_*
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_param">
  </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_param_fd">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>Supertype for float and decimal value allowing scientific notation
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_param">
        <xs:attribute name="logarithmic" type="type_osc_boolean" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_param_i">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>i integer
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_param_integer">
        <xs:choice>
          <xs:element name="range_min_max" type="type_osc_range_i_min_max" maxOccurs="1" minOccurs="0"/>
          <xs:element name="range_min_inf" type="type_osc_range_i_min_inf" maxOccurs="1" minOccurs="0"/>
          <xs:element name="range_inf_max" type="type_osc_range_i_inf_max" maxOccurs="1" minOccurs="0"/>
          <xs:element name="range_inf_inf" type="type_osc_range_i_inf_inf" maxOccurs="1" minOccurs="0"/>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_param_h">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>h long
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_param_integer">
        <xs:choice>
          <xs:element name="range_min_max" type="type_osc_range_h_min_max" maxOccurs="1" minOccurs="0"/>
          <xs:element name="range_min_inf" type="type_osc_range_h_min_inf" maxOccurs="1" minOccurs="0"/>
          <xs:element name="range_inf_max" type="type_osc_range_h_inf_max" maxOccurs="1" minOccurs="0"/>
          <xs:element name="range_inf_inf" type="type_osc_range_h_inf_inf" maxOccurs="1" minOccurs="0"/>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_param_f">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>f float
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_param_fd">
        <xs:choice>
          <xs:element name="range_min_max" type="type_osc_range_f_min_max" maxOccurs="1" minOccurs="0"/>
          <xs:element name="range_min_inf" type="type_osc_range_f_min_inf" maxOccurs="1" minOccurs="0"/>
          <xs:element name="range_inf_max" type="type_osc_range_f_inf_max" maxOccurs="1" minOccurs="0"/>
          <xs:element name="range_inf_inf" type="type_osc_range_f_inf_inf" maxOccurs="1" minOccurs="0"/>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_param_d">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>d double
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_param_fd">
        <xs:choice>
          <xs:element name="range_min_max" type="type_osc_range_d_min_max" maxOccurs="1" minOccurs="0"/>
          <xs:element name="range_min_inf" type="type_osc_range_d_min_inf" maxOccurs="1" minOccurs="0"/>
          <xs:element name="range_inf_max" type="type_osc_range_d_inf_max" maxOccurs="1" minOccurs="0"/>
          <xs:element name="range_inf_inf" type="type_osc_range_d_inf_inf" maxOccurs="1" minOccurs="0"/>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:simpleType name="type_osc_string_token">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>String for whitelist
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:minLength value="1"/>
    </xs:restriction>
  </xs:simpleType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_string_whitelist">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>A list of strings that is used as an accept-/whitelist
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="token" type="type_osc_string_token" maxOccurs="unbounded" minOccurs="1"/>
    </xs:sequence>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_param_s">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>s string
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_param">
        <xs:sequence>
          <xs:element name="whitelist" type="type_osc_string_whitelist" maxOccurs="1" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="min_length" type="xs:nonNegativeInteger" use="optional"/>
        <xs:attribute name="max_length" type="xs:nonNegativeInteger" use="optional"/>
<!--        <xs:attribute name="regex" type="xs:string" use="optional"/>
will be an element
-->
        <xs:attribute name="default" type="xs:string" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_param_b">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>Arbitrary byte sequence
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_param">
        <xs:attribute name="min_size" type="xs:nonNegativeInteger" use="optional"/>
        <xs:attribute name="max_size" type="xs:nonNegativeInteger" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

 <!-- ============================================= -->
  <xs:complexType name="type_osc_param_simple">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>Type for simple osc param_*
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="desc" type="xs:string" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="custom" type="type_osc_any" maxOccurs="unbounded" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="symbol" type="type_osc_symbol" use="required"/>
  </xs:complexType>

<!-- ============================================= -->
  <xs:complexType name="type_osc_param_T">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>T true
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_param_simple">
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

<!-- ============================================= -->
  <xs:complexType name="type_osc_param_F">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>F false
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_param_simple">
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

<!-- ============================================= -->
  <xs:complexType name="type_osc_param_N">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>N nil
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_param_simple">
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_param_I">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>I infinity
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_param_simple">
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

<!-- ============================================= -->
  <xs:complexType name="type_osc_param_t">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>t timetag
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_param_simple">
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

 <!-- ============================================= -->
  <xs:complexType name="type_osc_range_c_min_max">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>Supertype for char (dec/int!) value ranges
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_range">
        <xs:choice>
          <xs:element name="hints" type="type_osc_hints_c" maxOccurs="1" minOccurs="0"/>
          <xs:element name="grid" type="type_osc_grid_c" maxOccurs="1" minOccurs="0"/>
        </xs:choice>
        <xs:attribute name="min" type="type_osc_type_c" use="required"/>
        <xs:attribute name="max" type="type_osc_type_c" use="required"/>
        <xs:attribute name="default" type="type_osc_type_c" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

<!-- ============================================= -->
  <xs:complexType name="type_osc_param_c">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>LO_CHAR 	Standard C, 8 bit, char variable
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_param">
        <xs:sequence maxOccurs="1" minOccurs="0">
           <xs:element name="range_min_max" type="type_osc_range_c_min_max"/>
        </xs:sequence>
        <xs:attribute name="default" type="type_osc_type_c" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_hints_c">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="point" type="type_osc_point_c" maxOccurs="unbounded" minOccurs="1"/>
    </xs:sequence>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_grid_c">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>

    <xs:sequence>
      <xs:element name="point" type="type_osc_point_c" maxOccurs="unbounded" minOccurs="1"/>
    </xs:sequence>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_hints_i">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="point" type="type_osc_point_i" maxOccurs="unbounded" minOccurs="1"/>
    </xs:sequence>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_grid_i">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="point" type="type_osc_point_i" maxOccurs="unbounded" minOccurs="1"/>
    </xs:sequence>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_hints_h">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="point" type="type_osc_point_h" maxOccurs="unbounded" minOccurs="1"/>
    </xs:sequence>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_grid_h">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="point" type="type_osc_point_h" maxOccurs="unbounded" minOccurs="1"/>
    </xs:sequence>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_hints_f">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="point" type="type_osc_point_f" maxOccurs="unbounded" minOccurs="1"/>
    </xs:sequence>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_grid_f">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="point" type="type_osc_point_f" maxOccurs="unbounded" minOccurs="1"/>
    </xs:sequence>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_hints_d">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="point" type="type_osc_point_d" maxOccurs="unbounded" minOccurs="1"/>
    </xs:sequence>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_grid_d">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="point" type="type_osc_point_d" maxOccurs="unbounded" minOccurs="1"/>
    </xs:sequence>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_range">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>Supertype for value ranges
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:sequence>
        </xs:sequence>
  </xs:complexType>
 <!-- ============================================= -->
  <xs:complexType name="type_osc_range_i">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>Supertype for int value ranges
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_range">
        <xs:attribute name="default" type="xs:int" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_range_i_inf">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>Supertype for int value ranges with infinity
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_range_i">
        <xs:sequence>
          <xs:element name="hints" type="type_osc_hints_i" maxOccurs="1" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_range_i_inf_max">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>int value range: -INFINITY to MAX
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_range_i">
        <xs:sequence>
          <xs:element name="hints" type="type_osc_hints_i" maxOccurs="1" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="max" type="xs:int" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_range_i_inf_inf">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>int value range: -INFINITY to +INFINITY
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_range_i">
        <xs:sequence>
          <xs:element name="hints" type="type_osc_hints_i" maxOccurs="1" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_range_i_min">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>supertype for int value ranges with min
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_range_i">
        <xs:sequence>
          <xs:element name="hints" type="type_osc_hints_i" maxOccurs="1" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="min" type="xs:int" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_range_i_min_max">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>int value range: MIN to MAX
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_range_i">
        <xs:choice>
          <xs:element name="hints" type="type_osc_hints_i" maxOccurs="1" minOccurs="0"/>
          <xs:element name="grid" type="type_osc_grid_i" maxOccurs="1" minOccurs="0"/>
        </xs:choice>
        <xs:attribute name="min" type="xs:int" use="required"/>
        <xs:attribute name="max" type="xs:int" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_range_i_min_inf">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
int value range: MIN to +INFINITY
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_range_i">
        <xs:sequence>
          <xs:element name="hints" type="type_osc_hints_i" maxOccurs="1" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="min" type="xs:int" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_range_h">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_range">
        <xs:attribute name="default" type="xs:long" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_range_h_inf">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_range_h">
        <xs:sequence>
          <xs:element name="hints" type="type_osc_hints_h" maxOccurs="1" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_range_h_inf_max">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_range_h">
        <xs:sequence>
          <xs:element name="hints" type="type_osc_hints_h" maxOccurs="1" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="max" type="xs:int" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_range_h_inf_inf">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_range_h">
        <xs:sequence>
          <xs:element name="hints" type="type_osc_hints_h" maxOccurs="1" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_range_h_min">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_range_h">
        <xs:sequence>
          <xs:element name="hints" type="type_osc_hints_h" maxOccurs="1" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="min" type="xs:int" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_range_h_min_max">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_range_h">
        <xs:choice>
          <xs:element name="hints" type="type_osc_hints_h" maxOccurs="1" minOccurs="0"/>
          <xs:element name="grid" type="type_osc_grid_h" maxOccurs="1" minOccurs="0"/>
        </xs:choice>
        <xs:attribute name="min" type="xs:int" use="required"/>
        <xs:attribute name="max" type="xs:int" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_range_h_min_inf">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_range_h">
        <xs:sequence>
          <xs:element name="hints" type="type_osc_hints_h" maxOccurs="1" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="min" type="xs:int" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_range_f">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_range">
        <xs:attribute name="default" type="xs:float" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_range_f_inf">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_range_f">
        <xs:sequence>
          <xs:element name="hints" type="type_osc_hints_f" maxOccurs="1" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_range_f_inf_max">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_range_f_inf">
        <xs:attribute name="max" type="xs:float" use="required"/>
        <xs:attribute name="lmax" type="xs:string" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_range_f_inf_inf">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_range_f_inf">
    </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_range_f_min">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_range_f">
        <xs:sequence>
          <xs:element name="hints" type="type_osc_hints_f" maxOccurs="1" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="min" type="xs:float" use="required"/>
        <xs:attribute name="lmin" type="type_osc_range_limits" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_range_f_min_max">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_range_f">
        <xs:choice>
          <xs:element name="hints" type="type_osc_hints_f" maxOccurs="1" minOccurs="0"/>
          <xs:element name="grid" type="type_osc_grid_f" maxOccurs="1" minOccurs="0"/>
        </xs:choice>
        <xs:attribute name="min" type="xs:float" use="required"/>
        <xs:attribute name="lmin" type="type_osc_range_limits" use="required"/>
        <xs:attribute name="max" type="xs:float" use="required"/>
        <xs:attribute name="lmax" type="type_osc_range_limits" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_range_f_min_inf">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_range_f">
        <xs:sequence>
          <xs:element name="hints" type="type_osc_hints_f" maxOccurs="1" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="min" type="xs:float" use="required"/>
        <xs:attribute name="lmin" type="type_osc_range_limits" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_range_d">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_range">
        <xs:attribute name="default" type="xs:double" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_range_d_inf">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_range_d">
        <xs:sequence>
          <xs:element name="hints" type="type_osc_hints_d" maxOccurs="1" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_range_d_inf_max">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_range_d_inf">
        <xs:attribute name="max" type="xs:double" use="required"/>
        <xs:attribute name="lmax" type="xs:string" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_range_d_inf_inf">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_range_d_inf">
    </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_range_d_min">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_range_d">
        <xs:sequence>
          <xs:element name="hints" type="type_osc_hints_d" maxOccurs="1" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="min" type="xs:double" use="required"/>
        <xs:attribute name="lmin" type="type_osc_range_limits" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_range_d_min_max">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_range_d">
        <xs:choice>
          <xs:element name="hints" type="type_osc_hints_d" maxOccurs="1" minOccurs="0"/>
          <xs:element name="grid" type="type_osc_grid_d" maxOccurs="1" minOccurs="0"/>
        </xs:choice>
        <xs:attribute name="min" type="xs:double" use="required"/>
        <xs:attribute name="lmin" type="type_osc_range_limits" use="required"/>
        <xs:attribute name="max" type="xs:double" use="required"/>
        <xs:attribute name="lmax" type="type_osc_range_limits" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_range_d_min_inf">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_range_d">
        <xs:sequence>
          <xs:element name="hints" type="type_osc_hints_d" maxOccurs="1" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="min" type="xs:double" use="required"/>
        <xs:attribute name="lmin" type="type_osc_range_limits" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_any" mixed="true">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>Any valid XML structure
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:any minOccurs="0" processContents="skip"/>
    </xs:sequence>
    <xs:anyAttribute processContents="skip"/>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_condition">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>Structure to describe conditions when messages_out are sent to targets
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="desc" type="xs:string" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="custom" type="type_osc_any" maxOccurs="1" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="type" type="type_osc_condition_type" use="required"/>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_target">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>Structure to describe targets where message_out are sent to
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="desc" type="xs:string" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="custom" type="type_osc_any" maxOccurs="1" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="type" type="type_osc_target_type" use="required"/>
    <xs:attribute name="proto" type="type_osc_protocol" use="optional"/>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_point">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>Supertype for point value
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="symbol" type="type_osc_symbol" use="required"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_point_c">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>char point value
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_point">
        <xs:attribute name="value" type="type_osc_type_c" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

<!-- ============================================= -->
  <xs:complexType name="type_osc_point_i">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>int point value
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_point">
        <xs:attribute name="value" type="xs:int" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_point_h">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>long point value
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_point">
        <xs:attribute name="value" type="xs:long" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_point_f">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>float point value
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_point">
        <xs:attribute name="value" type="xs:float" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
<!-- ============================================= -->
  <xs:complexType name="type_osc_point_d">
    <xs:annotation>
      <xs:documentation xml:lang="en"><![CDATA[ 
<pre>double point value
</pre>]]></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="type_osc_point">
        <xs:attribute name="value" type="xs:double" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:schema>
